[{"path":"https://jsjuni.github.io/rollupTree/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rollup authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"rollupTree","text":"rollupTree implements general function computations property parent element combination corresponding properties child elements. mass assembly, example, sum masses subassemblies, mass subassembly sum masses parts, etc. rollupTree can perform computations specified arbitrarily-shaped (well-formed) trees, arbitrarily-defined properties property-combining operations. Defaults provided simplify common cases (atomic numerical properties combined summing), functional programming techniques allow caller pass arbitrary update methods required. Despite name, rollupTree can operate directed acyclic graphs trees instructed apply less stringent validation rules input. See default_validate_dag() rollup().","code":""},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"example-with-a-data-frame","dir":"Articles","previous_headings":"","what":"Example With A Data Frame","title":"rollupTree","text":"Consider example Work Breakdown Structure WorkBreakdownStructure.com:  computations example worked already; show reproduce . Work Breakdown Structure tree, , graph connected acyclic. , addition, directed, , edges direction. arbitrarily chose edge direction go child parent. Finally, single-rooted: every vertex one single parent vertex; root vertex parent. leaf elements (vertices) tree require asserted values properties (work, budget) interest. Property values non-leaf elements computed rollup(). begin capturing structure tree asserted values data frame call wbs_table. Values computed initially unknown. element uniquely identified id column1. also indicate parent id pid column information used directly rollup(). key feature recursively-defined problems like computations must ordered way computations given element must occur properties children known (either asserted computed). Traversing tree manner can achieved using well-known algorithm graph theory known topological sort. reason, construct igraph (Csárdi et al. 2025) graph object R, can conveniently (1) check graph fact well-formed tree, (2) efficiently execute topological sort order computations. (Note , although problems solved rollup defined recursively, implementation software recursive.) simple matter construct graph information data frame:","code":"library(rollupTree) wbs_table #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal   NA     NA #> 3    2  top              Foundation   NA     NA #> 4    3  top                External   NA     NA #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500 library(rollupTree) wbs_tree <- create_rollup_tree(   get_keys = function() wbs_table$id,   get_parent_key_by_child_key = function(key) wbs_table[wbs_table$id == key, \"pid\"] )"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"wbs-tree","dir":"Articles","previous_headings":"","what":"rollupTree","title":"rollupTree","text":"directed acyclic graph may one topological sort; suitable purpose. rollup() uses internally:","code":"igraph::topo_sort(wbs_tree) #> + 10/10 vertices, named, from d73ade8: #>  [1] 1.1 1.2 2.1 2.2 3.1 3.2 1   2   3   top"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"summing-a-single-numeric-property","dir":"Articles","previous_headings":"Example With A Data Frame","what":"Summing a Single Numeric Property","title":"rollupTree","text":"Although data first example data frame, rollup() can operate arbitrary R object provided update validate methods object. common case parameter interest numeric column data frame, combine operation addition, key column named id, package provides update_df_prop_by_id() validate_df_by_id() functions can invoked boilerplate. roll work property, example, simply invoke: update_df_prop_by_id() (like every well-behaved update method) modifies specified column leaves rest data frame unchanged. want roll budget column well, can simply chain two rollup()s together. example use R’s pipe operator: cases, approach suffices. code simple clear, performance typically issue. (testing rollup() performs tens thousands non-trivial property updates per second.) show alternate approaches, mainly illustrate architectural features approach may useful esoteric applications.","code":"rollup(   tree=wbs_tree,   ds=wbs_table,   update=function(d, t, s) update_df_prop_by_id(df=d, target=t, sources=s, prop=\"work\"),   validate_ds=function(t, d) validate_df_by_id(tree=t, df=d, prop=\"work\") ) #>     id  pid                    name  work budget #> 1  top <NA> Construction of a House 100.0     NA #> 2    1  top                Internal  45.6     NA #> 3    2  top              Foundation  24.0     NA #> 4    3  top                External  30.4     NA #> 5  1.1    1              Electrical  11.8  25000 #> 6  1.2    1                Plumbing  33.8  61000 #> 7  2.1    2                Excavate  18.2  37000 #> 8  2.2    2          Steel Erection   5.8   9000 #> 9  3.1    3            Masonry Work  16.2  62000 #> 10 3.2    3       Building Finishes  14.2  21500 rollup(   tree=wbs_tree,   ds=wbs_table,   update=function(d, t, s) update_df_prop_by_id(df=d, target=t, sources=s, prop=\"work\"),   validate_ds=function(t, d) validate_df_by_id(tree=t, df=d, prop=\"work\") ) |> rollup(   tree=wbs_tree,   ds=_,   update=function(d, t, s) update_df_prop_by_id(df=d, target=t, sources=s, prop=\"budget\"),   validate_ds=function(t, d) validate_df_by_id(tree=t, df=d, prop=\"budget\") ) #>     id  pid                    name  work budget #> 1  top <NA> Construction of a House 100.0 215500 #> 2    1  top                Internal  45.6  86000 #> 3    2  top              Foundation  24.0  46000 #> 4    3  top                External  30.4  83500 #> 5  1.1    1              Electrical  11.8  25000 #> 6  1.2    1                Plumbing  33.8  61000 #> 7  2.1    2                Excavate  18.2  37000 #> 8  2.2    2          Steel Erection   5.8   9000 #> 9  3.1    3            Masonry Work  16.2  62000 #> 10 3.2    3       Building Finishes  14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"chaining-update-methods","dir":"Articles","previous_headings":"Example With A Data Frame","what":"Chaining Update Methods","title":"rollupTree","text":"valid update method returns updated data set, can chain two updates within single rollup() instead chaining two rollup()s. Similarly, data set validator returns logical value, can make conjunction two validators:","code":"rollup(   tree = wbs_tree,   ds = wbs_table,   update = function(d, t, s) {     update_df_prop_by_id(       df = d,       target = t,       sources = s,       prop = \"work\"     ) |>       update_df_prop_by_id(target = t,                            sources = s,                            prop = \"budget\")   },   validate_ds = function(t, d) {     validate_df_by_id(tree = t, df = d, prop = \"work\") &&       validate_df_by_id(tree = t, df = d, prop = \"budget\")   } ) #>     id  pid                    name  work budget #> 1  top <NA> Construction of a House 100.0 215500 #> 2    1  top                Internal  45.6  86000 #> 3    2  top              Foundation  24.0  46000 #> 4    3  top                External  30.4  83500 #> 5  1.1    1              Electrical  11.8  25000 #> 6  1.2    1                Plumbing  33.8  61000 #> 7  2.1    2                Excavate  18.2  37000 #> 8  2.2    2          Steel Erection   5.8   9000 #> 9  3.1    3            Masonry Work  16.2  62000 #> 10 3.2    3       Building Finishes  14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"custom-get-set-and-update-methods","dir":"Articles","previous_headings":"Example With A Data Frame","what":"Custom get, set, and update Methods","title":"rollupTree","text":"example create custom get method builds named vector specified properties (using lower-level function df_get_by_id()) corresponding set method (using df_set_by_id()). create custom update method using methods. (default combine method still works R knows add vectors.) Finally, create custom data set validator invoke rollup() custom methods.","code":"my_get <- function(d, i) c(   w=df_get_by_id(df=d, id=i, prop=\"work\"),   b=df_get_by_id(df=d, id=i, prop=\"budget\") ) my_set <- function(d, i, v) {   df_set_by_id(df=d, id=i, prop=\"work\", val=v[\"w\"]) |>     df_set_by_id(id=i, prop=\"budget\", val=v[\"b\"]) } my_update <- function(d, t, s) {     update_prop(ds=d, target=t, sources=s, set=my_set, get=my_get) } my_validate <- function(t, d) {   validate_ds(tree=t, ds=d,                get_keys=function(d) df_get_ids(df=d),                get_prop=my_get,                op=function(v) my_check(v[\"w\"]) && my_check(v[\"b\"])   ) } my_check <- function(v)   is.numeric(v) && !is.na(v) && (v > 0.0)  rollup(   tree = wbs_tree,   ds = wbs_table,   update = my_update,   validate_ds = my_validate ) #>     id  pid                    name  work budget #> 1  top <NA> Construction of a House 100.0 215500 #> 2    1  top                Internal  45.6  86000 #> 3    2  top              Foundation  24.0  46000 #> 4    3  top                External  30.4  83500 #> 5  1.1    1              Electrical  11.8  25000 #> 6  1.2    1                Plumbing  33.8  61000 #> 7  2.1    2                Excavate  18.2  37000 #> 8  2.2    2          Steel Erection   5.8   9000 #> 9  3.1    3            Masonry Work  16.2  62000 #> 10 3.2    3       Building Finishes  14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"custom-combine-method","dir":"Articles","previous_headings":"Example With A Data Frame","what":"Custom combine Method","title":"rollupTree","text":"Finally, illustrate use custom combiner. Suppose 5% uncertainty leaf cost numbers. Add uncertainty numbers data frame: standard technique accumulating uncertainties combine using root-sum-square (RSS).","code":"new_wbs_table <- wbs_table new_wbs_table$work <- NULL new_wbs_table$budget_unc <- ifelse(is.na(wbs_table$budget), NA, wbs_table$budget * 0.05) new_wbs_table #>     id  pid                    name budget budget_unc #> 1  top <NA> Construction of a House     NA         NA #> 2    1  top                Internal     NA         NA #> 3    2  top              Foundation     NA         NA #> 4    3  top                External     NA         NA #> 5  1.1    1              Electrical  25000       1250 #> 6  1.2    1                Plumbing  61000       3050 #> 7  2.1    2                Excavate  37000       1850 #> 8  2.2    2          Steel Erection   9000        450 #> 9  3.1    3            Masonry Work  62000       3100 #> 10 3.2    3       Building Finishes  21500       1075 combine_rss <- function(vl) {   sqrt(Reduce(f = `+`, x = Map(     f = function(v)       v * v,     vl   ))) } result <- rollup(   tree = wbs_tree,   ds = new_wbs_table,   update = function(d, t, s)     update_df_prop_by_id(       df = d,       target = t,       sources = s,       prop = \"budget\"     ) |>     update_df_prop_by_id(       target = t,       sources = s,       prop = \"budget_unc\",       combine = combine_rss     ),   validate_ds = function(t, d)     validate_df_by_id(tree = t, df = d, prop = \"budget_unc\"), ) result$budget_unc_pct <- result$budget_unc / result$budget * 100. result #>     id  pid                    name budget budget_unc budget_unc_pct #> 1  top <NA> Construction of a House 215500   5025.497       2.332017 #> 2    1  top                Internal  86000   3296.210       3.832802 #> 3    2  top              Foundation  46000   1903.943       4.139007 #> 4    3  top                External  83500   3281.101       3.929462 #> 5  1.1    1              Electrical  25000   1250.000       5.000000 #> 6  1.2    1                Plumbing  61000   3050.000       5.000000 #> 7  2.1    2                Excavate  37000   1850.000       5.000000 #> 8  2.2    2          Steel Erection   9000    450.000       5.000000 #> 9  3.1    3            Masonry Work  62000   3100.000       5.000000 #> 10 3.2    3       Building Finishes  21500   1075.000       5.000000"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"example-with-a-list","dir":"Articles","previous_headings":"","what":"Example With A List","title":"rollupTree","text":"Suppose instead data frame list lists: construct update validate functions follows: output rollup() expected:","code":"wbs_list <- lapply(split(wbs_table, wbs_table$id),                    function(r) list(name = r$name, budget = r$budget) ) str(wbs_list) #> List of 10 #>  $ 1  :List of 2 #>   ..$ name  : chr \"Internal\" #>   ..$ budget: num NA #>  $ 1.1:List of 2 #>   ..$ name  : chr \"Electrical\" #>   ..$ budget: num 25000 #>  $ 1.2:List of 2 #>   ..$ name  : chr \"Plumbing\" #>   ..$ budget: num 61000 #>  $ 2  :List of 2 #>   ..$ name  : chr \"Foundation\" #>   ..$ budget: num NA #>  $ 2.1:List of 2 #>   ..$ name  : chr \"Excavate\" #>   ..$ budget: num 37000 #>  $ 2.2:List of 2 #>   ..$ name  : chr \"Steel Erection\" #>   ..$ budget: num 9000 #>  $ 3  :List of 2 #>   ..$ name  : chr \"External\" #>   ..$ budget: num NA #>  $ 3.1:List of 2 #>   ..$ name  : chr \"Masonry Work\" #>   ..$ budget: num 62000 #>  $ 3.2:List of 2 #>   ..$ name  : chr \"Building Finishes\" #>   ..$ budget: num 21500 #>  $ top:List of 2 #>   ..$ name  : chr \"Construction of a House\" #>   ..$ budget: num NA list_get <- function(d, i) d[[i]]$budget list_set <- function(d, i, v) { d[[i]]$budget = v; d } list_update <- function(d, t, s) { update_prop(d, t, s, list_set, list_get) } list_validate <- function(t, d) validate_ds(t, d, get_keys = function(l) names(l), get = list_get) list_result <- rollup(wbs_tree, wbs_list, list_update, list_validate) str(list_result) #> List of 10 #>  $ 1  :List of 2 #>   ..$ name  : chr \"Internal\" #>   ..$ budget: num 86000 #>  $ 1.1:List of 2 #>   ..$ name  : chr \"Electrical\" #>   ..$ budget: num 25000 #>  $ 1.2:List of 2 #>   ..$ name  : chr \"Plumbing\" #>   ..$ budget: num 61000 #>  $ 2  :List of 2 #>   ..$ name  : chr \"Foundation\" #>   ..$ budget: num 46000 #>  $ 2.1:List of 2 #>   ..$ name  : chr \"Excavate\" #>   ..$ budget: num 37000 #>  $ 2.2:List of 2 #>   ..$ name  : chr \"Steel Erection\" #>   ..$ budget: num 9000 #>  $ 3  :List of 2 #>   ..$ name  : chr \"External\" #>   ..$ budget: num 83500 #>  $ 3.1:List of 2 #>   ..$ name  : chr \"Masonry Work\" #>   ..$ budget: num 62000 #>  $ 3.2:List of 2 #>   ..$ name  : chr \"Building Finishes\" #>   ..$ budget: num 21500 #>  $ top:List of 2 #>   ..$ name  : chr \"Construction of a House\" #>   ..$ budget: num 215500"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"example-with-a-tree","dir":"Articles","previous_headings":"","what":"Example With A Tree","title":"rollupTree","text":"tree can serve dataset proper attributes methods. illustrate, add budget figures data frame vertex attributes tree: construct update validate functions follows: output rollup() expected:","code":"library(igraph) #>  #> Attaching package: 'igraph' #> The following objects are masked from 'package:stats': #>  #>     decompose, spectrum #> The following object is masked from 'package:base': #>  #>     union new_wbs_tree <- Reduce(   f = function(g, k) set_vertex_attr(g, 'budget', k, df_get_by_id(wbs_table, k, 'budget')),   x = names(V(wbs_tree)),   init = wbs_tree ) ib <- vertex_attr(new_wbs_tree, \"budget\") names(ib) <- names(V(new_wbs_tree)) ib #>   top     1     2     3   1.1   1.2   2.1   2.2   3.1   3.2  #>    NA    NA    NA    NA 25000 61000 37000  9000 62000 21500 tree_get <- function(d, k) vertex_attr(d, \"budget\", k) tree_set <- function(d, k, v) set_vertex_attr(d, \"budget\", k, v) tree_update <- function(d, t, s) update_prop(d, t, s, set = tree_set, get = tree_get) tree_validate <- function(t, d) validate_ds(t, d, get_keys = function(d) names(V(d)), get = tree_get) tree_result <- rollup(new_wbs_tree, new_wbs_tree, update = tree_update, validate_ds = tree_validate) ob <- vertex_attr(tree_result, \"budget\") names(ob) <- names(V(tree_result)) ob #>    top      1      2      3    1.1    1.2    2.1    2.2    3.1    3.2  #> 215500  86000  46000  83500  25000  61000  37000   9000  62000  21500"},{"path":"https://jsjuni.github.io/rollupTree/articles/rollupTree.html","id":"simple-fault-tree-analysis","dir":"Articles","previous_headings":"","what":"Simple Fault Tree Analysis","title":"rollupTree","text":"Fault tree analysis similarly recursive. show greatly-simplified (Devasia 2021) example illustrate particular feature implementation. purpose illustration, make following simplifying assumptions: Every gate associated intermediate event, gate/event pair can represented single vertex tree. gates type permitted. initial fault properties table : edge list fault tree : Get set methods example simple obvious: applications (e.g., mass properties), combining operation values combined, therefore passed values input. case fault tree, however, input gate multiplied, whereas gate summed. can accommodate situation passing optional type argument combiner follows: Calling rollup() usual manner yields:","code":"#>                                    id  type prob #> 1                   Water overflowing    or   NA #> 2 Circuit failure and no warning lamp   and   NA #> 3                      Sensor failure basic 0.02 #> 4                 No voltage at input    or   NA #> 5                        Chip failure basic 0.05 #> 6                 Warning lamp burned basic 0.03 #> 7                     No V in network basic 0.12 #> 8                         Fuse burned basic 0.23 #> + 7/7 edges from 2d2da5d (vertex names): #> [1] Circuit failure and no warning lamp->Water overflowing                   #> [2] Sensor failure                     ->Water overflowing                   #> [3] No voltage at input                ->Water overflowing                   #> [4] Chip failure                       ->Circuit failure and no warning lamp #> [5] Warning lamp burned                ->Circuit failure and no warning lamp #> [6] No V in network                    ->No voltage at input                 #> [7] Fuse burned                        ->No voltage at input df_get_fault_props <- function(df, id) {   list(     type = df_get_by_id(df, id, \"type\"),     prob = df_get_by_id(df, id, \"prob\")   ) }  df_set_fault_props <- function(df, id, v) {   df_set_by_id(df, id, \"prob\", v$prob) } combine_fault_props <- function(vl, type) {   list(     prob = Reduce(       f = if (type == \"and\") \"*\" else \"+\",       Map(f = function(v) v$prob, vl)     )   ) }  update_fault_props <- function(ds, parent_key, child_keys) {   update_prop(     ds,     target = parent_key,     sources = child_keys,     set = df_set_fault_props,     get = df_get_fault_props,     combine = function(vl)       combine_fault_props(vl, df_get_fault_props(ds, parent_key)$type)   ) }  validate_fault_props <- function(fp) {   if (fp$type != \"basic\") stop(sprintf(\"invalid leaf node type %s\", fp$type))   if (!is.numeric(fp$prob) || fp$prob < 0.0 || fp$prob > 1.0)     stop(sprintf(\"invalid probability value %f\", fp$prob))   TRUE }  validate_fault_props_table <- function(tree, df) {   validate_ds(tree, df, df_get_ids, df_get_fault_props, validate_fault_props) } #>                                    id  type   prob #> 1                   Water overflowing    or 0.3715 #> 2 Circuit failure and no warning lamp   and 0.0015 #> 3                      Sensor failure basic 0.0200 #> 4                 No voltage at input    or 0.3500 #> 5                        Chip failure basic 0.0500 #> 6                 Warning lamp burned basic 0.0300 #> 7                     No V in network basic 0.1200 #> 8                         Fuse burned basic 0.2300"},{"path":[]},{"path":"https://jsjuni.github.io/rollupTree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Steven Jenkins. Author, maintainer, copyright holder.","code":""},{"path":"https://jsjuni.github.io/rollupTree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jenkins JS (2025). rollupTree: Perform Recursive Computations. R package version 0.3.0.9000, https://github.com/jsjuni/rollupTree, https://jsjuni.github.io/rollupTree/.","code":"@Manual{,   title = {rollupTree: Perform Recursive Computations},   author = {James Steven Jenkins},   year = {2025},   note = {R package version 0.3.0.9000, https://github.com/jsjuni/rollupTree},   url = {https://jsjuni.github.io/rollupTree/}, }"},{"path":"https://jsjuni.github.io/rollupTree/index.html","id":"rolluptree","dir":"","previous_headings":"","what":"Perform Recursive Computations","title":"Perform Recursive Computations","text":"rollupTree implements general function computations property parent element combination corresponding properties child elements. mass assembly, example, sum masses subassemblies, mass subassembly sum masses parts, etc. rollupTree can perform computations specified arbitrarily-shaped (well-formed) trees, arbitrarily-defined properties property-combining operations. Defaults provided simplify common cases (atomic numerical properties combined summing), functional programming techniques allow caller pass arbitrary update methods required. Despite name, rollupTree can operate directed acyclic graphs trees instructed apply less stringent validation rules input.","code":""},{"path":"https://jsjuni.github.io/rollupTree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Perform Recursive Computations","text":"can install development version rollupTree GitHub :","code":"install.packages(\"rollupTree\") # install.packages(\"pak\") pak::pak(\"jsjuni/rollupTree\")"},{"path":"https://jsjuni.github.io/rollupTree/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Perform Recursive Computations","text":"Suppose data frame representing work breakdown structure: tree edges representing child-parent relations breakdown: can sum budget numbers follows:","code":"library(rollupTree) wbs_table #>     id  pid                    name budget #> 1  top <NA> Construction of a House     NA #> 2    1  top                Internal     NA #> 3    2  top              Foundation     NA #> 4    3  top                External     NA #> 5  1.1    1              Electrical  25000 #> 6  1.2    1                Plumbing  61000 #> 7  2.1    2                Excavate  37000 #> 8  2.2    2          Steel Erection   9000 #> 9  3.1    3            Masonry Work  62000 #> 10 3.2    3       Building Finishes  21500 igraph::E(wbs_tree) #> + 9/9 edges from dd17ef5 (vertex names): #> [1] 1  ->top 2  ->top 3  ->top 1.1->1   1.2->1   2.1->2   2.2->2   3.1->3   #> [9] 3.2->3 rollup(   tree=wbs_tree,   ds=wbs_table,   update=function(d, t, s) update_df_prop_by_id(df=d, target=t, sources=s, prop=\"budget\"),   validate_ds=function(t, d) validate_df_by_id(tree=t, df=d, prop=\"budget\") ) #>     id  pid                    name budget #> 1  top <NA> Construction of a House 215500 #> 2    1  top                Internal  86000 #> 3    2  top              Foundation  46000 #> 4    3  top                External  83500 #> 5  1.1    1              Electrical  25000 #> 6  1.2    1                Plumbing  61000 #> 7  2.1    2                Excavate  37000 #> 8  2.2    2          Steel Erection   9000 #> 9  3.1    3            Masonry Work  62000 #> 10 3.2    3       Building Finishes  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/create_rollup_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tree for use with rollup() — create_rollup_tree","title":"Create a tree for use with rollup() — create_rollup_tree","text":"create_rollup_tree() creates tree suitable use rollup() applying helper functions construct vertices edges.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/create_rollup_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tree for use with rollup() — create_rollup_tree","text":"","code":"create_rollup_tree(get_keys, get_parent_key_by_child_key)"},{"path":"https://jsjuni.github.io/rollupTree/reference/create_rollup_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tree for use with rollup() — create_rollup_tree","text":"get_keys function() returns collection names vertices. get_parent_key_by_child_key function(key) returns child key key parent.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/create_rollup_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tree for use with rollup() — create_rollup_tree","text":"igraph directed graph vertices edges supplied","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/create_rollup_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tree for use with rollup() — create_rollup_tree","text":"","code":"get_keys <- function() wbs_table$id get_parent_key_by_child_key <- function(key) wbs_table[which(wbs_table$id == key), \"pid\"] create_rollup_tree(get_keys, get_parent_key_by_child_key) #> IGRAPH f6a65b5 DN-- 10 9 --  #> + attr: name (v/c) #> + edges from f6a65b5 (vertex names): #> [1] 1  ->top 2  ->top 3  ->top 1.1->1   1.2->1   2.1->2   2.2->2   3.1->3   #> [9] 3.2->3"},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a directed acyclic graph for use with rollup — default_validate_dag","title":"Validate a directed acyclic graph for use with rollup — default_validate_dag","text":"Validate directed acyclic graph use rollup","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a directed acyclic graph for use with rollup — default_validate_dag","text":"","code":"default_validate_dag(dag)"},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_dag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a directed acyclic graph for use with rollup — default_validate_dag","text":"dag igraph directed acyclic graph","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_dag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a directed acyclic graph for use with rollup — default_validate_dag","text":"TRUE valid, stops otherwise","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_dag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a directed acyclic graph for use with rollup — default_validate_dag","text":"","code":"default_validate_dag(test_dag) #> [1] TRUE"},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a tree for use with rollup() — default_validate_tree","title":"Validate a tree for use with rollup() — default_validate_tree","text":"default_validate_tree() ensures tree acyclic, loop-free, single-edged, connected, directed, single-rooted edge direction child parent.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a tree for use with rollup() — default_validate_tree","text":"","code":"default_validate_tree(tree)"},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a tree for use with rollup() — default_validate_tree","text":"tree igraph directed graph valid single-rooted -tree whose vertex names keys data set","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a tree for use with rollup() — default_validate_tree","text":"single root vertex identifier tree valid; stops otherwise","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/default_validate_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a tree for use with rollup() — default_validate_tree","text":"","code":"default_validate_tree(wbs_tree) #> top  #>   2"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get property by key ","title":"Get property by key ","text":"df_get_by_id returns value specified property (column) specified row data frame. row specified value id column.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get property by key ","text":"","code":"df_get_by_id(df, idval, prop)"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get property by key ","text":"df data frame idval id row get prop name column get","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get property by key ","text":"requested value","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get property by key ","text":"","code":"df_get_by_id(wbs_table, \"1.1\", \"work\") #> [1] 11.8"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get property by key from data frame — df_get_by_key","title":"Get property by key from data frame — df_get_by_key","text":"df_get_by_key returns value specified property (column) specified row data frame. row specified key column value column.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get property by key from data frame — df_get_by_key","text":"","code":"df_get_by_key(df, key, keyval, prop)"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get property by key from data frame — df_get_by_key","text":"df data frame key name column used key keyval value key specified row prop column name property value get","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get property by key from data frame — df_get_by_key","text":"requested value","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_by_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get property by key from data frame — df_get_by_key","text":"","code":"df_get_by_key(wbs_table, \"id\", \"1.1\", \"work\") #> [1] 11.8"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ids from a data frame — df_get_ids","title":"Get ids from a data frame — df_get_ids","text":"default name key column rollup id. df_get_ids gets values id column data frame.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ids from a data frame — df_get_ids","text":"","code":"df_get_ids(df)"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ids from a data frame — df_get_ids","text":"df data frame","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ids from a data frame — df_get_ids","text":"values id column","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ids from a data frame — df_get_ids","text":"","code":"df_get_ids(wbs_table) #>  [1] \"top\" \"1\"   \"2\"   \"3\"   \"1.1\" \"1.2\" \"2.1\" \"2.2\" \"3.1\" \"3.2\""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Get keys from a data frame — df_get_keys","title":"Get keys from a data frame — df_get_keys","text":"df_get_keys gets values designated column data frame.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get keys from a data frame — df_get_keys","text":"","code":"df_get_keys(df, key)"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get keys from a data frame — df_get_keys","text":"df data frame key name column used key","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get keys from a data frame — df_get_keys","text":"values key column","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_get_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get keys from a data frame — df_get_keys","text":"","code":"df_get_keys(wbs_table, \"id\") #>  [1] \"top\" \"1\"   \"2\"   \"3\"   \"1.1\" \"1.2\" \"2.1\" \"2.2\" \"3.1\" \"3.2\""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Set property by key ","title":"Set property by key ","text":"Set property key \"id\" data frame","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set property by key ","text":"","code":"df_set_by_id(df, idval, prop, val)"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set property by key ","text":"df data frame idval id value specified row prop column name property value get val value set","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set property by key ","text":"updated data frame","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set property by key ","text":"","code":"df_set_by_id(wbs_table, \"1\", \"work\", 45.6) #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal 45.6     NA #> 3    2  top              Foundation   NA     NA #> 4    3  top                External   NA     NA #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Set property by key in data frame — df_set_by_key","title":"Set property by key in data frame — df_set_by_key","text":"Set property key data frame","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set property by key in data frame — df_set_by_key","text":"","code":"df_set_by_key(df, key, keyval, prop, val)"},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set property by key in data frame — df_set_by_key","text":"df data frame key name column used key keyval value key specified row prop column name property value get val value set","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set property by key in data frame — df_set_by_key","text":"updated data frame","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/df_set_by_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set property by key in data frame — df_set_by_key","text":"","code":"df_set_by_key(wbs_table, \"id\", \"1\", \"work\", 45.6) #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal 45.6     NA #> 3    2  top              Foundation   NA     NA #> 4    3  top                External   NA     NA #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Fault Tree Data — fault_table","title":"Example Fault Tree Data — fault_table","text":"Example Fault Tree Data","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Fault Tree Data — fault_table","text":"","code":"fault_table"},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Fault Tree Data — fault_table","text":"data frame columns: id unique key row type event type (\"basic\", \"\", \"\") prob event probability","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_table.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Fault Tree Data — fault_table","text":"https://control.com/technical-articles/deep-dive--fault-tree-analysis/","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Fault Tree — fault_tree","title":"Example Fault Tree — fault_tree","text":"Example Fault Tree","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Fault Tree — fault_tree","text":"","code":"fault_tree"},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Fault Tree — fault_tree","text":"igraph tree edges child id parent id.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/fault_tree.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Fault Tree — fault_tree","text":"https://control.com/technical-articles/deep-dive--fault-tree-analysis/","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/rollup.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform recursive computation — rollup","title":"Perform recursive computation — rollup","text":"rollup() traverses tree depth-first (post order) calls user-specified update function vertex, passing method data set, unique key target vertex data set, list source keys. update method typically gets properties source elements data set, combines , sets properties target element data set combined value, returns updated data set input update next vertex. final operation updates root vertex. update_prop() helper function available simplify building compliant update methods. beginning traversal, rollup() calls user-specified method validate tree well-formed (see default_validate_tree()). also calls user-specified method ensure id sets tree data set identical, data set elements corresponding leaf vertices tree satisfy user-specified predicate, e.g., .numeric().","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/rollup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform recursive computation — rollup","text":"","code":"rollup(tree, ds, update, validate_ds, validate_tree = default_validate_tree)"},{"path":"https://jsjuni.github.io/rollupTree/reference/rollup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform recursive computation — rollup","text":"tree igraph directed graph valid single-rooted -tree whose vertex names keys data set ds data set updated; can object update function called vertex update(ds, parent_key, child_keys) validate_ds data set validator function called validate_ds(tree, ds) validate_tree tree validator function called validate_tree(tree)","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/rollup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform recursive computation — rollup","text":"updated input data set","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/rollup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform recursive computation — rollup","text":"data set passed rollup() can object update function can written. common simple example data frame, lists work well.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/rollup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform recursive computation — rollup","text":"","code":"rollup(wbs_tree, wbs_table,   update = function(d, p, c) {     if (length(c) > 0)       d[d$id == p, c(\"work\", \"budget\")] <-         apply(d[is.element(d$id, c), c(\"work\", \"budget\")], 2, sum)       d   },   validate_ds = function(tree, ds) TRUE ) #>     id  pid                    name  work budget #> 1  top <NA> Construction of a House 100.0 215500 #> 2    1  top                Internal  45.6  86000 #> 3    2  top              Foundation  24.0  46000 #> 4    3  top                External  30.4  83500 #> 5  1.1    1              Electrical  11.8  25000 #> 6  1.2    1                Plumbing  33.8  61000 #> 7  2.1    2                Excavate  18.2  37000 #> 8  2.2    2          Steel Erection   5.8   9000 #> 9  3.1    3            Masonry Work  16.2  62000 #> 10 3.2    3       Building Finishes  14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/test_dag.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Directed Acyclic Graph — test_dag","title":"Example Directed Acyclic Graph — test_dag","text":"Example Directed Acyclic Graph","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/test_dag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Directed Acyclic Graph — test_dag","text":"","code":"test_dag"},{"path":"https://jsjuni.github.io/rollupTree/reference/test_dag.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Directed Acyclic Graph — test_dag","text":"igraph DAG edges child id parent id.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a property in a data frame with key ","title":"Update a property in a data frame with key ","text":"update_df_prop_by_id() convenience wrapper around update_prop() common case data set data frame whose key column named \"id\"","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a property in a data frame with key ","text":"","code":"update_df_prop_by_id(df, target, sources, prop, ...)"},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a property in a data frame with key ","text":"df data frame target key data set element updated sources keys data set elements combined prop column name property ... arguments passed update_prop()","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a property in a data frame with key ","text":"updated dataframe","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a property in a data frame with key ","text":"","code":"update_df_prop_by_id(wbs_table, \"1\", list(\"1.1\", \"1.2\"), \"work\") #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal 45.6     NA #> 3    2  top              Foundation   NA     NA #> 4    3  top                External   NA     NA #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a property in a data frame — update_df_prop_by_key","title":"Update a property in a data frame — update_df_prop_by_key","text":"update_df_prop_by_key() convenience wrapper around update_prop() common case data set data frame.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a property in a data frame — update_df_prop_by_key","text":"","code":"update_df_prop_by_key(df, key, target, sources, prop, ...)"},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a property in a data frame — update_df_prop_by_key","text":"df data frame key name column serving key target key data set element updated sources keys data set elements combined prop column name property ... arguments passed update_prop()","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a property in a data frame — update_df_prop_by_key","text":"updated data frame","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_df_prop_by_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a property in a data frame — update_df_prop_by_key","text":"","code":"update_df_prop_by_key(wbs_table, \"id\", \"1\", list(\"1.1\", \"1.2\"), \"work\") #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal 45.6     NA #> 3    2  top              Foundation   NA     NA #> 4    3  top                External   NA     NA #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/update_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a data set with recursively-defined properties — update_prop","title":"Update a data set with recursively-defined properties — update_prop","text":"update_prop calls user-specified methods get properties source set elements data set, combine properties, set properties target element combined value. source set empty, data set returned unmodified. default combine operation addition. override argument can used selectively override computed value based target element. default, simply returns value computed combiner.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a data set with recursively-defined properties — update_prop","text":"","code":"update_prop(   ds,   target,   sources,   set,   get,   combine = function(l) Reduce(\"+\", l),   override = function(ds, target, v) v )"},{"path":"https://jsjuni.github.io/rollupTree/reference/update_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a data set with recursively-defined properties — update_prop","text":"ds data set updated target key data set element updated sources keys data set elements combined set function set properties target element called set(ds, key, value) get function get properties source elements called get(ds, key) combine function combine properties called combine(vl) override function selectively override combined results called override(ds, key,)","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a data set with recursively-defined properties — update_prop","text":"updated data set","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a data set with recursively-defined properties — update_prop","text":"","code":"update_prop(wbs_table, \"1\", list(\"1.1\", \"1.2\"),   function(d, k, v) {d[d$id == k, \"work\"] <- v; d},   function(d, k) d[d$id == k, \"work\"]  ) #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal 45.6     NA #> 3    2  top              Foundation   NA     NA #> 4    3  top                External   NA     NA #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500 update_prop(wbs_table, \"1\", list(\"1.1\", \"1.2\"),   function(d, k, v) {d[d$id == k, c(\"work\", \"budget\")] <- v; d},   function(d, k) d[d$id == k, c(\"work\", \"budget\")],   function(l) Reduce(\"+\", l) ) #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal 45.6  86000 #> 3    2  top              Foundation   NA     NA #> 4    3  top                External   NA     NA #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/update_rollup.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a rollup from a single leaf vertex — update_rollup","title":"Update a rollup from a single leaf vertex — update_rollup","text":"update_rollup() performs minimal update data set assuming single leaf element property changed. performs updates along path vertex root. difference output calling rollup() . update_rollup() perhaps efficient useful interactive context.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_rollup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a rollup from a single leaf vertex — update_rollup","text":"","code":"update_rollup(tree, ds, vertex, update)"},{"path":"https://jsjuni.github.io/rollupTree/reference/update_rollup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a rollup from a single leaf vertex — update_rollup","text":"tree igraph directed graph valid single-rooted -tree whose vertex names keys data set ds data set updated; can object vertex start vertex update function called vertex update(ds, parent_key, child_keys)","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_rollup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a rollup from a single leaf vertex — update_rollup","text":"updated input data set","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/update_rollup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a rollup from a single leaf vertex — update_rollup","text":"","code":"update_rollup(wbs_tree, wbs_table, igraph::V(wbs_tree)[\"3.2\"],   update = function(d, p, c) {     if (length(c) > 0)       d[d$id == p, c(\"work\", \"budget\")] <-         apply(d[is.element(d$id, c), c(\"work\", \"budget\")], 2, sum)       d   } ) #>     id  pid                    name work budget #> 1  top <NA> Construction of a House   NA     NA #> 2    1  top                Internal   NA     NA #> 3    2  top              Foundation   NA     NA #> 4    3  top                External 30.4  83500 #> 5  1.1    1              Electrical 11.8  25000 #> 6  1.2    1                Plumbing 33.8  61000 #> 7  2.1    2                Excavate 18.2  37000 #> 8  2.2    2          Steel Erection  5.8   9000 #> 9  3.1    3            Masonry Work 16.2  62000 #> 10 3.2    3       Building Finishes 14.2  21500"},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a data frame with key ","title":"Validate a data frame with key ","text":"validate_df_by_id() convenience wrapper validate_ds() common case data set data frame key column named \"id\".","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a data frame with key ","text":"","code":"validate_df_by_id(tree, df, prop, ...)"},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a data frame with key ","text":"tree tree validate df data frame prop property whose value checked (leaf elements ) ... parameters passed validate_ds()","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a data frame with key ","text":"TRUE validation succeeds, halts otherwise","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a data frame with key ","text":"","code":"validate_df_by_id(wbs_tree, wbs_table, \"work\") #> [1] TRUE"},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a data frame For rollup() — validate_df_by_key","title":"Validate a data frame For rollup() — validate_df_by_key","text":"validate_df_by_key() convenience wrapper validate_ds() common case data set dataframe.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a data frame For rollup() — validate_df_by_key","text":"","code":"validate_df_by_key(tree, df, key, prop, ...)"},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a data frame For rollup() — validate_df_by_key","text":"tree tree validate df data frame key name column serving key prop property whose value checked (leaf elements ) ... parameters passed validate_ds()","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a data frame For rollup() — validate_df_by_key","text":"TRUE validation succeeds, halts otherwise","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_df_by_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a data frame For rollup() — validate_df_by_key","text":"","code":"validate_df_by_key(wbs_tree, wbs_table, \"id\", \"work\") #> [1] TRUE"},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Validates a data set for use with rollup() — validate_ds","title":"Validates a data set for use with rollup() — validate_ds","text":"validate_ds() ensures data set contains identifiers specified tree elements data set corresponding leaf vertices tree satisfy user-specified predicate.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validates a data set for use with rollup() — validate_ds","text":"","code":"validate_ds(   tree,   ds,   get_keys,   get_prop,   op = function(x) is.numeric(x) & !is.na(x) )"},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validates a data set for use with rollup() — validate_ds","text":"tree igraph directed graph valid single-rooted -tree whose vertex names keys data set ds data set updated; can object get_keys function get keys data set called get_keys(ds) get_prop function get property value validate leaf element id l, called get_prop(ds, l) op logical function test return value get_prop() (default .numeric()); returns TRUE OK","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validates a data set for use with rollup() — validate_ds","text":"TRUE validation succeeds, halts otherwise","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/validate_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validates a data set for use with rollup() — validate_ds","text":"","code":"validate_ds(wbs_tree, wbs_table, function(d) d$id, function(d, l) d[d$id == l, \"work\"]) #> [1] TRUE"},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Work Breakdown Structure Data — wbs_table","title":"Example Work Breakdown Structure Data — wbs_table","text":"Example Work Breakdown Structure Data","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Work Breakdown Structure Data — wbs_table","text":"","code":"wbs_table"},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Work Breakdown Structure Data — wbs_table","text":"data frame columns: id unique key row pid parent key row name character name element work percent total work element budget budget element","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Work Breakdown Structure Data — wbs_table","text":"https://www.workbreakdownstructure.com","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table_rollup.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Work Breakdown Structure Data After Rollup — wbs_table_rollup","title":"Example Work Breakdown Structure Data After Rollup — wbs_table_rollup","text":"Example Work Breakdown Structure Data Rollup","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table_rollup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Work Breakdown Structure Data After Rollup — wbs_table_rollup","text":"","code":"wbs_table_rollup"},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table_rollup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Work Breakdown Structure Data After Rollup — wbs_table_rollup","text":"data frame columns: id unique key row pid parent key row name character name element work percent total work element budget budget element","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_table_rollup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Work Breakdown Structure Data After Rollup — wbs_table_rollup","text":"https://www.workbreakdownstructure.com","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Work Breakdown Structure Data — wbs_tree","title":"Example Work Breakdown Structure Data — wbs_tree","text":"Example Work Breakdown Structure Data","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Work Breakdown Structure Data — wbs_tree","text":"","code":"wbs_tree"},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_tree.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Work Breakdown Structure Data — wbs_tree","text":"igraph tree edges child id parent id.","code":""},{"path":"https://jsjuni.github.io/rollupTree/reference/wbs_tree.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Work Breakdown Structure Data — wbs_tree","text":"https://www.workbreakdownstructure.com","code":""},{"path":[]},{"path":"https://jsjuni.github.io/rollupTree/news/index.html","id":"rolluptree-030","dir":"Changelog","previous_headings":"","what":"rollupTree 0.3.0","title":"rollupTree 0.3.0","text":"CRAN release: 2025-03-06 default_validate_dag() added (#11). badges github actions added README.md (#14).","code":""},{"path":"https://jsjuni.github.io/rollupTree/news/index.html","id":"rolluptree-020","dir":"Changelog","previous_headings":"","what":"rollupTree 0.2.0","title":"rollupTree 0.2.0","text":"CRAN release: 2025-02-04 Fault tree example added. Documentation cleaned . create_rollup_tree() (new) creates tree suitable rollup() data frame child/parent identifier pairs.","code":""},{"path":"https://jsjuni.github.io/rollupTree/news/index.html","id":"rolluptree-010","dir":"Changelog","previous_headings":"","what":"rollupTree 0.1.0","title":"rollupTree 0.1.0","text":"CRAN release: 2025-01-20 Initial CRAN submission.","code":""}]
